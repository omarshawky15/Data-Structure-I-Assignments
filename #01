import java.math.*;

class Fib{
	public static void term (int t) {
		BigInteger fib0 = new BigInteger ("0") ;
		BigInteger fib1 = new BigInteger ("1") ;
		BigInteger fib2 = new BigInteger ("0") ;
	    
	    if (t==0)System.out.println(fib0);
		else if(t<0)System.out.println("Term isn't Avaible");
	    else if (t==1)System.out.println(fib1);
			else {
				for (int i=2 ; i<=t ; i++) {
					fib2 = fib1.add(fib0);
					fib0 = fib1 ; 
					fib1 = fib2;
				}
				System.out.println(fib2);
			}
	}
}
  
  
  
  
                                            //First Question (Comes Second ^_^)





class MySpecialArrayUtils {
	public static void reverse(int[] arr) {
		for (int i=0 ; i< (arr.length)/2 ; i++) {
			int temp = arr[i] ;
			arr[i] = arr[arr.length -i-1];
			 arr[arr.length -i-1] = temp ; 
		}
	}
	public static int[] sumEvenOdd(int[] arr) {
		 int[] sideArr = {0,0};
		 if (arr.length == 0)return sideArr ;
		 for (int i=0 ; i< arr.length ;i++) {
			 if(arr[i] % 2 == 0) sideArr[0] +=arr[i] ;
			 else sideArr[1] +=arr[i] ;
		 }
		 return sideArr ;
	}
	public static double average(int[] arr) {
		double x = 0 ;
		for (int i= 0 ; i<arr.length ; i++) {
			x += (double)arr[i] / arr.length ; 
		}
		return x ;
	}
	public static int [][] transpose(int[][] arr) {
		/* if it might be empty i can make a flag in the main that at least one of the entries
		 * has a non-zero value should make the flag triggered and equal to 1 , so it will go inside the method 
		 * to transpose it , else it will never enter this method !
		 */
		if((arr.length == 0) || arr[0].length == 0) {System.out.print("error");  return arr;}
		int [][] arr2 = new int [arr[0].length][arr.length];
		for (int i= 0 ; i <arr.length ; i++) {
			for (int j=0 ; j<arr[i].length ; j++) {
					arr2[j][i] = arr[i][j] ;
			}
		}
		return arr2;
	}
}
